@inject IJSRuntime JSRuntime
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages 

<div class="script-editor">
    <div class="editor-header">
        <h4>スクリプトエディタ</h4>
        <div class="editor-actions">
            <button class="btn btn-primary btn-sm" @onclick="ExecuteScript" disabled="@IsExecuting">
                @if (IsExecuting)
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                }
                実行 (Ctrl+Enter)
            </button>
            <button class="btn btn-outline-secondary btn-sm" @onclick="ClearEditor">
                クリア
            </button>
        </div>
    </div>

    <div class="editor-container">
        <StandaloneCodeEditor @ref="monacoEditor" Id="script-editor" ConstructionOptions="EditorConstructionOptions"
            OnDidInit="OnEditorInit" OnDidChangeModelContent="OnContentChanged" CssClass="monaco-editor-custom" />
    </div>
</div> 
           
@code {
    private StandaloneCodeEditor? monacoEditor;
    private string scriptContent = "// AliceScriptのコードを入力してください\nprint(\"Hello,World!\");";
    private bool IsExecuting = false;

    [Parameter] public EventCallback<string> OnExecuteScript { get; set; }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "csharp",
            Theme = "vs-dark",
            Value = scriptContent,
            AutomaticLayout = true,
            FontSize = 16,
            WordWrap = "on",
            LineNumbers = "on",
            RoundedSelection = false,
            ScrollBeyondLastLine = false,
            ReadOnly = false,
            OverviewRulerLanes = 2,
            TabSize = 4,
            InsertSpaces = true,
            SelectOnLineNumbers = true,
            GlyphMargin = false,
            FoldingStrategy = "indentation",
            ShowFoldingControls = "always",
            MatchBrackets = "always",
            AutoClosingBrackets = "always",
            AutoClosingQuotes = "always",
            AutoSurround = "languageDefined"
        };
    }

    private async Task OnEditorInit()
    {
        if (monacoEditor != null)
        {
            // Ctrl+Enterキーバインドを追加
            var actionDescriptor = new ActionDescriptor
            {
                Id = "execute-script",
                Label = "実行",
                Keybindings = new int[] { (int)KeyMod.CtrlCmd | (int)KeyCode.Enter },
                ContextMenuGroupId = "navigation",
                ContextMenuOrder = 1.5f,
                Run = (editor) =>
                {
                    _ = ExecuteScript();
                }
            };
            await monacoEditor.AddAction(actionDescriptor);
        }
    }

    private async Task OnContentChanged(ModelContentChangedEvent e)
    {
        if (monacoEditor != null)
        {
            scriptContent = await monacoEditor.GetValue();
        }
    }

    private async Task ExecuteScript()
    {
        if (IsExecuting) return;

        IsExecuting = true;
        StateHasChanged();

        try
        {
            if (monacoEditor != null)
            {
                scriptContent = await monacoEditor.GetValue();
            }
            await OnExecuteScript.InvokeAsync(scriptContent);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error executing script: {ex.Message}");
        }
        finally
        {
            IsExecuting = false;
            StateHasChanged();
        }
    }

    private async Task ClearEditor()
    {
        scriptContent = "";
        if (monacoEditor != null)
        {
            await monacoEditor.SetValue("");
        }
    }

    public async Task SetValue(string value)
    {
        scriptContent = value;
        if (monacoEditor != null)
        {
            await monacoEditor.SetValue(value);
        }
        StateHasChanged();
    }

    public async Task<string> GetValue()
    {
        if (monacoEditor != null)
        {
            return await monacoEditor.GetValue();
        }
        return scriptContent;
    }
}
        