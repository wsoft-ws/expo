@page "/"
@page "/script-runner"
@using WSOFT.Expo.WebUI.Components
@using WSOFT.Expo.WebUI.Services
@inject ScriptService ScriptService
@inject EditorStateService EditorStateService
@inject CanvasService CanvasService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>AliceScript WebRunner</PageTitle>

<div class="script-runner-container">
    <div class="upper-section">
        <div class="editor-section">
            <ScriptEditor @ref="scriptEditor" OnExecuteScript="ExecuteScript" />
        </div>
        <div class="canvas-section">
            <CanvasPanel />
        </div>
    </div>
    <div class="console-section">
        <ConsolePanel />
    </div>
</div>

@code {
    private ScriptEditor? scriptEditor;
    private DotNetObjectReference<ScriptRunner>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("window.setDotNetReference", objRef);
        }
    }

    protected override void OnInitialized()
    {
        EditorStateService.OnNewScript += HandleNewScript;
        EditorStateService.OnLoadScript += HandleLoadScript;
        EditorStateService.OnGetCurrentScript += HandleGetCurrentScript;
    }

    [JSInvokable]
    public async Task LoadScriptFromPost(string code, string filename)
    {
        await InvokeAsync(async () =>
        {
            if (scriptEditor != null)
            {
                await scriptEditor.SetValue(code);
            }
            StateHasChanged();
        });
    }

    [JSInvokable]
    public async Task LoadScriptFromUrl(string code)
    {
        await InvokeAsync(async () =>
        {
            if (scriptEditor != null)
            {
                await scriptEditor.SetValue(code);
            }
            StateHasChanged();
        });
    }

    private async Task ExecuteScript(string script)
    {
        await ScriptService.ExecuteScript(script);
    }

    private void HandleNewScript(string content)
    {
        _ = Task.Run(async () =>
        {
            if (scriptEditor != null)
            {
                await scriptEditor.SetValue(content);
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    private void HandleLoadScript(string content)
    {
        _ = Task.Run(async () =>
        {
            if (scriptEditor != null)
            {
                await scriptEditor.SetValue(content);
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    private async Task<string> HandleGetCurrentScript()
    {
        if (scriptEditor != null)
        {
            return await scriptEditor.GetValue();
        }
        return "";
    }

    public void Dispose()
    {
        EditorStateService.OnNewScript -= HandleNewScript;
        EditorStateService.OnLoadScript -= HandleLoadScript;
        EditorStateService.OnGetCurrentScript -= HandleGetCurrentScript;
        objRef?.Dispose();
    }
}
}