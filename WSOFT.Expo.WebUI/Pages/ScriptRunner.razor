@page "/"
@page "/script-runner"
@using WSOFT.Expo.WebUI.Components
@using WSOFT.Expo.WebUI.Services
@inject ScriptService ScriptService
@inject EditorStateService EditorStateService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>AliceScript WebRunner</PageTitle>

<div class="script-runner-container">
    <div class="row h-100">
        <div class="col-md-6">
            <ScriptEditor @ref="scriptEditor" OnExecuteScript="ExecuteScript" />
        </div>
        <div class="col-md-6">
            <ConsolePanel />
        </div>
    </div>
</div>

@code {
    private ScriptEditor? scriptEditor;
    private DotNetObjectReference<ScriptRunner>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("window.setDotNetReference", objRef);
        }
    }

    protected override void OnInitialized()
    {
        EditorStateService.OnNewScript += HandleNewScript;
        EditorStateService.OnLoadScript += HandleLoadScript;
        EditorStateService.OnGetCurrentScript += HandleGetCurrentScript;
    }

    [JSInvokable]
    public async Task LoadScriptFromPost(string code, string filename)
    {
        await InvokeAsync(() =>
        {
            scriptEditor?.SetValue(code);
            StateHasChanged();
        });
    }

    [JSInvokable]
    public async Task LoadScriptFromUrl(string code)
    {
        await InvokeAsync(() =>
        {
            scriptEditor?.SetValue(code);
            StateHasChanged();
        });
    }

    private void ExecuteScript(string script)
    {
        ScriptService.ExecuteScript(script);
    }

    private void HandleNewScript(string content)
    {
        scriptEditor?.SetValue(content);
    }

    private void HandleLoadScript(string content)
    {
        scriptEditor?.SetValue(content);
    }

    private Task<string> HandleGetCurrentScript()
    {
        return Task.FromResult(scriptEditor?.GetValue() ?? "");
    }

    public void Dispose()
    {
        EditorStateService.OnNewScript -= HandleNewScript;
        EditorStateService.OnLoadScript -= HandleLoadScript;
        EditorStateService.OnGetCurrentScript -= HandleGetCurrentScript;
        objRef?.Dispose();
    }
}
    